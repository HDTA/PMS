<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!-- 以下配置的加载顺序：ServletContext >> context-param >> listener >> filter >>
        servlet >> spring -->

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
        <!-- 设置是否启用异步支持 -->
        <async-supported>true</async-supported>
        <!-- 文件上传配置 -->
        <multipart-config>
            <!-- 文件路径 -->
            <location></location>
            <!-- 文件的最大大小，单位为字节 -->
            <max-file-size>5242880</max-file-size>
            <!-- 请求的最大大小，单位为字节 -->
            <max-request-size>10485760</max-request-size>
            <!--文件大小阈值，当大于这个阈值时将写入到磁盘，否则在内存中。默认值为0 -->
            <file-size-threshold>0</file-size-threshold>
        </multipart-config>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    
    <jsp-config>

    </jsp-config>


    <!-- 添加shiro过滤器 -->

    <!--<filter>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
        <!--<init-param>-->
            <!--&lt;!&ndash; 该值缺省为false，表示声明周期由SpringApplicationContext管理，-->
  		         <!--设置为true表示ServletContainer管理 &ndash;&gt;-->

            <!--<param-name>targetFilterLifecycle</param-name>-->
            <!--<param-value>true</param-value>-->
        <!--</init-param>-->

    <!--</filter>-->
    <!--<filter-mapping>-->
        <!--<filter-name>shiroFilter</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->



    <!-- 编码过滤器  -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 设置是否启用异步支持 -->
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 如果某个会话在120分钟未被访问,则服务器可以扔掉以节约资源 -->
    <session-config>
        <session-timeout>120</session-timeout>
    </session-config>



    <!-- 设定某种扩展名的文件用一种应用程序来打开的方式类型,当该扩展名文件被访问的时候,浏览器会自动使用指定应用程序来打开 -->
    <!--<mime-mapping>-->
        <!--<extension>ppt</extension>-->
        <!--<mime-type>application/vnd.ms-powerpoint</mime-type>-->
    <!--</mime-mapping>-->

    <!--<mime-mapping>-->
        <!--<extension>mp4</extension>-->
        <!--<mime-type>video/mp4</mime-type>-->
    <!--</mime-mapping>-->


    <!-- 定义首页列单 -->
    <!--<welcome-file-list>-->
        <!--&lt;!&ndash; 用来指定首页文件名称可以用<welcome-file>指定几个首页,而服务器会依照顺序来找首页 &ndash;&gt;-->
        <!--<welcome-file>/index.jsp</welcome-file>-->
        <!--<welcome-file>/index.html</welcome-file>-->
    <!--</welcome-file-list>-->


    <!--<error-page>-->
        <!--<error-code>404</error-code>-->
        <!--<location>/error.jsp</location>-->
    <!--</error-page>-->


    <!--
   <listener>
       <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
   </listener>

   <filter>
       <filter-name>log4jServletFilter</filter-name>
       <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
   </filter>
   <filter-mapping>
       <filter-name>log4jServletFilter</filter-name>
       <url-pattern>/*</url-pattern>
       <dispatcher>REQUEST</dispatcher>
       <dispatcher>FORWARD</dispatcher>
       <dispatcher>INCLUDE</dispatcher>
       <dispatcher>ERROR</dispatcher>
   </filter-mapping>
-->


    <!-- 防止spring内存溢出的监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <!--
    <context-param>
        <param-name>log4jConfigLocation</param-name>-->
    <!--<param-value>classpath:log4j.properties</param-value>-->
    <!--<param-value>classpath:log4j2.xml</param-value>
</context-param>-->


    <!-- Spring刷新Log4j配置文件变动的间隔,单位为毫秒 -->
    <!--<context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>10000</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    -->


    <!--
    <listener>
        <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
    </listener>

    <filter>
        <filter-name>log4jServletFilter</filter-name>
        <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>log4jServletFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
-->


</web-app>